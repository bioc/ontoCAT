%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
%\VignetteIndexEntry{ontoCAT package}
%\VignetteDepends{}
%\VignetteKeywords{Classification, DataRepresentation}
%\VignettePackage{ontoCAT}
\documentclass[]{article}
\usepackage{times}
\usepackage{hyperref}


\textwidth=6.2in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\R}{\textsf{R}}
\newcommand{\ontoCAT}{\Rpackage{ontoCAT}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}

\newcommand{\term}[1]{\emph{#1}}
    \newcommand{\mref}[2]{\htmladdnormallinkfoot{#2}{#1}}

\begin{document}

\title{\ontoCAT{}: package for basic operations with ontologies}
    \author{\mref{mailto:natalja@ebi.ac.uk}{Natalja Kurbatova}, Tomasz Adamusiak, Pavel Kurnosov, Morris Swertz and Misha Kapushesky }
\date{15 March, 2011}
\maketitle

Version 1.1.2. released 18 March, 2011.


\section{Introduction}

We present \ontoCAT{} -- an R package providing a simple interface to ontologies described in two widely used formats:
OBO (Open Biomedical Ontology format) and OWL (Web Ontology Language). Supporting these
two formats the \ontoCAT{} package gives unified, format-independent access to ontology terms and the ontology hierarchy.

Our package's focus is on basic operations with ontologies, including searching for terms, getting a particular term's
parents and/or children, showing paths to the term from the root element of the ontology, showing flattened-tree
representations of the ontology hierarchy. Integration of this functionality into the \R environment allows to combine easily
tasks concerning ontologies with other R scripts.

Light ontoCAT package version is available in Bioconductor starting from the release 2.7.

Full version includes batch methods, searches in OLS and Bioportal repositories, and it is heavier in terms of size: 7.9 MB. That is why it was not included into Bioconductor where package size is limited with 2 MB.  

Full version of ontoCAT package as well as Java sources, Java docs, examples and documentation are available on the ontoCAT project website  \url{http://www.ontocat.org/wiki/r}

The package is based on the Ontology Common API Tasks Java library
(\url{http://www.ontocat.org}) as well as various other utilites methods and
depends on \Rpackage{rJava} R package.

\section{Basic operations with ontology}
The \ontoCAT{} package can load an ontology from a local file or on-the-fly from a URI. An inferred ontology
view is created internally, using \textbf{Pellet} to classify the ontology. Ontologies described in OWL or OBO format are
supported. 

\subsection{Create Ontology object}
To create an object of \Rclass{Ontology} you can use one of the two methods:
\begin{itemize}
\item \Rfunction{getEFO()} loads the latest EFO version on the fly from the
EFO SVN repository and creates \Robject{Ontology} object.
\item \Rfunction{getOntology("pathToOntology")} loads the ontology described in
OWL or OBO format from a local file or a UR and creates \Robject{Ontology} object.
\end{itemize}
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
library(ontoCAT)
efo <- getEFO()
biotop <- getOntology("http://purl.org/biotop/biotop.owl")
@

\subsection{Ontology traversal and search}
\begin{itemize}
\item
To find all ontology terms two functions can be used:
\Rfunction{getAllTerms} - returns a list of \Rclass{OntologyTerm} objects. In turn,
\Rfunction{getAllTermIds} - returns a list of term accessions.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getAllTerms(biotop)
getAllTermIds(efo)
@

\item
Function \Rfunction{getTermById} returns the accession number of the term.
In turn, \Rfunction{getTermNameById} returns the name of the term.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
term_efo <- getTermById(efo,"EFO_0000322")
term_biotop <- getTermById(biotop,"DeadBody")
getTermNameById(efo,"EFO_0000311")
getTermNameById(biotop,"EmbryonicStructure")
@

\item
To find out all term parents or children the following functions can be used.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getAllTermParentsById(efo,"EFO_0000322")
getAllTermChildrenById(biotop,"DeadBody")
getAllTermParents(efo,term_efo)
getAllTermChildren(biotop,term_biotop)
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object.
\item
To find out only direct parents or children of the term functions \Rfunction{getTermParents}
or \Rfunction{getTermChildren} can be used.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getTermParentsById(efo,"EFO_0000322")
getTermChildrenById(efo,"EFO_0000322")
getTermParents(efo,term_efo)
getTermChildren(biotop,term_biotop)
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object.
\item
One more function to get term children together with the queried term accession is
\Rfunction{getTermAndAllChildrenIds}.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getTermAndAllChildren(efo,term_efo)
getTermAndAllChildrenById(biotop,"DeadBody")
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object.
\item
To create a flat subtree representation of the ontology "opened" down to the specified
term function \Rfunction{showHierarchyDownToTerm} can be used. Hierarchy of ontology will be 
shown down to requested term. 
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
showHierarchyDownToTermById(efo,"EFO_0000322")
showHierarchyDownToTerm(efo,term_efo)
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object.
\item
A few simple functions allow to get term definition and synonyms:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getTermDefinitionsById(efo,"EFO_0000322")
getTermSynonymsById(efo,"EFO_0000322")
getTermDefinitions(efo,term_efo)
getTermSynonyms(efo,term_efo)
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object.
\item
A few simple functions allow to get some metadata about the used ontology:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getOntologyAccession(efo)
getOntologyDescription(efo)
@
Arguments: appropriate \Robject{Ontology}.
\item
To check if the term is present in the ontology function \Rfunction{hasTerm} can
be used.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
hasTerm(efo,"CL000023")
hasTerm(efo,"EFO_0000322")
@
Arguments: appropriate \Robject{Ontology} and the term accession.
\item
The following functions can be used to search terms in the ontology:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
searchTerm(efo,"thymus")
searchTermPrefix(efo,"thym")
@
Arguments: appropriate \Robject{Ontology} and string\/string prefix to search for.
\item
The following functions can be used to investigate the ontology hierarchy:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
isRootById(efo,"EFO_0000322")
isRoot(efo,term_efo)
getRoots(efo)
getRootIds(efo)
@
For some ontologies these functions might fail when the ontology used was not design
to have root classes.

\end{itemize}

\subsection{Relations}
The \ontoCAT{} package uses HermiT reasoner (considered the reference reasoner implementation for OWL API) and it is possible to compute relationship across any axis in a given ontology, e.g. has\_part, derives\_from. Behind the scenes it uses the reasoner to query the ontology for children of inverse(ObjectProperty) some ClassInQuestion. While this is not exhaustive and effectively focuses on quantifier restrictions ignoring universal restrictions (allValuesFrom) over existential restrictions (someValuesFrom) it covers the majority of restrictions used in practice and computes the relationships in reasonable time.

\begin{itemize}
\item
To list all supported relations in ontology the following function can be used:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getOntologyRelationNames(efo)
@

\item
To list relations that has particular term the following function can be used:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getTermRelationNamesById(efo,"EFO_0000322")
getTermRelationNames(efo,term_efo)
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object.

\item
Please use the following functions to find out terms that are in some relation with the term of interest:
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getTermRelationsById(efo,"EFO_0000322","has_part")
getTermRelations(efo,term_efo,"has_part")
@
Arguments: appropriate \Robject{Ontology} object, the term's accession or  \Robject{OntologyTerm} object, relation name.

\end{itemize}

\subsection{Functions specific for EFO ontology}
There are few functions specific for EFO class hierarchy to work with EFO branch roots.
<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
getEFOBranchRootIds(efo)
isEFOBranchRootById(efo,"EFO_0000322")
isEFOBranchRoot(efo,term_efo)
@

\subsection{Ontology term object}
There are only three functions for the \Rclass{OntologyTerm} class.
\begin{itemize}
\item \Rfunction{getLabel} to get term name;
\item \Rfunction{getAccession} to get term accession;
\item \Rfunction{show} to view the term.
\end{itemize}

<<R.hide, results=hide, echo=TRUE, eval=FALSE>>=
term <- getTermById(efo,"EFO_0000322")
getLabel(term)
getAccession(term)
term
@

\section*{References}
\begin{enumerate}
\item Adamusiak T, Burdett T, van der Velde K J, Abeygunawardena N, Antonakaki D, Parkinson H and Swertz M:
OntoCAT -- a simpler way to access ontology resources. \emph{Available from Nature Precedings}
\url{http://dx.doi.org/10.1038/npre.2010.4666.1} (2010)

\item Malone J, Holloway E, Adamusiak T, Kapushesky M, Zheng J, Kolesnikov N, Zhukova A, Brazma A, Parkinson H:
Modeling Sample Variables with an Experimental Factor Ontology.
\emph{Bioinformatics} 2010, \textbf{26}(8):1112--1118

\item Experimental Factor Ontology \url{http://www.ebi.ac.uk/efo}

\item Ontology Common API Tasks java library \url{http://www.ontocat.org}

\item OntoCAT website \url{http://www.ontocat.org/wiki/r}

\item Java sources and javadocs: \url{http://sourceforge.net/projects/ontocat/files/}
\end{enumerate}

\end{document}